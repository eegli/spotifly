"use strict";(self.webpackChunk_spotifly_website=self.webpackChunk_spotifly_website||[]).push([[889],{2599:(e,t,l)=>{l.d(t,{Z:()=>r});var n=l(7378),a=l(8944);const s="tabItem_wHwb";function r(e){let{children:t,hidden:l,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(s,r),hidden:l},t)}},7698:(e,t,l)=>{l.d(t,{Z:()=>d});var n=l(2685),a=l(7378),s=l(8944),r=l(362),i=l(56),o=l(5720),u=l(9169);const p="tabList_J5MA",c="tabItem_l0OV";function k(e){var t,l;const{lazy:r,block:k,defaultValue:d,values:m,groupId:h,className:y}=e,g=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=m?m:g.map((e=>{let{props:{value:t,label:l,attributes:n}}=e;return{value:t,label:l,attributes:n}})),v=(0,i.l)(f,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===d?d:null!=(t=null!=d?d:null==(l=g.find((e=>e.props.default)))?void 0:l.props.value)?t:g[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:A}=(0,o.U)(),[T,w]=(0,a.useState)(b),S=[],{blockElementScrollPositionUntilNextRender:P}=(0,u.o5)();if(null!=h){const e=N[h];null!=e&&e!==T&&f.some((t=>t.value===e))&&w(e)}const U=e=>{const t=e.currentTarget,l=S.indexOf(t),n=f[l].value;n!==T&&(P(t),w(n),null!=h&&A(h,String(n)))},C=e=>{var t;let l=null;switch(e.key){case"ArrowRight":{var n;const t=S.indexOf(e.currentTarget)+1;l=null!=(n=S[t])?n:S[0];break}case"ArrowLeft":{var a;const t=S.indexOf(e.currentTarget)-1;l=null!=(a=S[t])?a:S[S.length-1];break}}null==(t=l)||t.focus()};return a.createElement("div",{className:(0,s.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":k},y)},f.map((e=>{let{value:t,label:l,attributes:r}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>S.push(e),onKeyDown:C,onFocus:U,onClick:U},r,{className:(0,s.Z)("tabs__item",c,null==r?void 0:r.className,{"tabs__item--active":T===t})}),null!=l?l:t)}))),r?(0,a.cloneElement)(g.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function d(e){const t=(0,r.Z)();return a.createElement(k,(0,n.Z)({key:String(t)},e))}},4119:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var n=l(2685),a=(l(7378),l(5318)),s=l(7698),r=l(2599);const i={title:"Core"},o=void 0,u={unversionedId:"packages/core",id:"packages/core",title:"Core",description:"npm (scoped) Codecov",source:"@site/docs/packages/core.mdx",sourceDirName:"packages",slug:"/packages/core",permalink:"/docs/packages/core",draft:!1,editUrl:"https://github.com/eegli/spotifly/tree/main/docs/docs/packages/core.mdx",tags:[],version:"current",frontMatter:{title:"Core"},sidebar:"tutorialSidebar",previous:{title:"Auth Token",permalink:"/docs/packages/auth-token"},next:{title:"Library",permalink:"/docs/packages/library/"}},p={},c=[{value:"Motivation",id:"motivation",level:2},{value:"Usage",id:"usage",level:2},{value:"Installation",id:"installation",level:3},{value:"Example",id:"example",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Supported Endpoints and Methods",id:"supported-endpoints-and-methods",level:3},{value:"Response Schema",id:"response-schema",level:3},{value:"Future",id:"future",level:3},{value:"Convenience Methods",id:"convenience-methods",level:2},{value:"Usage",id:"usage-1",level:3},{value:"Callbacks",id:"callbacks",level:3},{value:"Testing Recipes",id:"testing-recipes",level:2}],k={toc:c};function d(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,n.Z)({},k,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://img.shields.io/npm/v/@spotifly/core",alt:"npm (scoped)"})," ",(0,a.kt)("img",{parentName:"p",src:"https://codecov.io/gh/eegli/spotifly/branch/main/graph/badge.svg?flag=core",alt:"Codecov"})),(0,a.kt)("h2",{id:"motivation"},"Motivation"),(0,a.kt)("p",null,"The Spotifly core library is a lightweight wrapper for the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.spotify.com/documentation/web-api/"},"Spotify Web API"),". Out of the box, it features:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Strong TypeScript and IntelliSense support"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"All function parameters and return values are strongly typed"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"A neatly organized, intuitive API"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Sticks closely to the semantics of the Web API"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Convenience methods for limited and paginated endpoints"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Automatically retreive all items from paginated and limited endpoints"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Automatic authentication"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Provide your credentials once and have every request authenticate automatically with Spotify"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"100% future-proof"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Today's wrapper API supports the Spotify endpoints of tomorrow"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Testing with confidence"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Creating stubs for the core lib is a piece of cake. Read along for testing recipes!")))),(0,a.kt)("p",null,"Although the core library is very lightweight, it may be overkill if you're only interested in one or two Web API endpoints. However, for many other use cases, including long-running apps, it's a great fit."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Installing the types for the Web API is highly recommended!"),(0,a.kt)(s.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @spotifly/core @types/spotify-api\n"))),(0,a.kt)(r.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @spotifly/core @types/spotify-api\n")))),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as Spotifly from '@spotifly/core';\n\nconst spotifyClient = Spotifly.initialize({\n  accessToken: 'abc123',\n});\n\n// Deriving the genres of a track via its artists\nawait spotifyClient.Tracks.getTrack('5nHc8CmiPllMzHbJhhx3KS')\n  .then(res => {\n    return res.data.artists.map(artist => artist.id);\n  })\n  .then(artistIds => {\n    return spotifyClient.Artists.getSeveralArtists(artistIds);\n  })\n  .then(res => {\n    const genres = res.data.artists.map(artist => artist.genres).flat();\n    console.log(genres); // [ 'livetronica', 'munich electronic' ]\n  });\n\n// Getting all of a user's saved tracks\nawait spotifyClient.Tracks.getAllUsersSavedTracks()()\n  .then(res => {\n    return res.map(res => res.data.items).flat();\n  })\n  .then(library => {\n    console.log(library.length); // 70\n  });\n\n// Searching for an item\nawait spotifyClient.Search.search({ query: 'eminem', type: 'album' }).then(\n  res => {\n    console.log(res.data.albums?.items[0]?.name); // 'The Eminem Show'\n  }\n);\n")),(0,a.kt)("h3",{id:"authentication"},"Authentication"),(0,a.kt)("p",null,"Every Spotify client is created through a call to ",(0,a.kt)("inlineCode",{parentName:"p"},"initialize"),". A client is bound to the ",(0,a.kt)("strong",{parentName:"p"},"authentication method it was instantiated with"),". There are multiple ways to instantiate a client:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"With a Spotify client id, client secret and refresh token")," - This method will automatically generate an initial access token and refresh it when it's about to expire after 1 hour. This is great for apps that need to run independently.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { initialize } from '@spotifly/core';\n\nconst spotifyClient = initialize({\n  clientId: process.env.SPOTIFY_CLIENT_ID || '',\n  clientSecret: process.env.SPOTIFY_CLIENT_SECRET || '',\n  refreshToken: process.env.SPOTIFY_REFRESH_TOKEN || '',\n});\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"With a Spotify access token")," - This method will simply attach the provided access token to requests to Spotify. No secrets are involved but requests may fail once the token has expired.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { initialize } from '@spotifly/core';\n\nconst spotifyClient = Spotify.initialize({\n  accessToken: 'abc123',\n});\n")),(0,a.kt)("p",null,"Both methods return a Spotify client with the same methods."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Usually, a refresh token only needs to be generated once. You can ",(0,a.kt)("a",{parentName:"p",href:"/docs/authorization"},"generate one here")," using the Authorization Code Flow.")),(0,a.kt)("h3",{id:"supported-endpoints-and-methods"},"Supported Endpoints and Methods"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://developer.spotify.com/documentation/web-api/reference/#/"},"Web API Reference"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"\u2705 - Fully supported"),(0,a.kt)("li",{parentName:"ul"},"\u303d\ufe0f - Partial support - work in progress"),(0,a.kt)("li",{parentName:"ul"},"\u274c - Not yet suppoted - contributions are welcome!")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Endpoint"),(0,a.kt)("th",{parentName:"tr",align:null},"Support"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Albums"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Artists"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Categories"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Episodes"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Genres"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Markets"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Player"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Playlists"),(0,a.kt)("td",{parentName:"tr",align:null},"\u303d\ufe0f")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Search"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Shows"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Tracks"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Users"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Playlists, missing: ",(0,a.kt)("a",{parentName:"li",href:"https://developer.spotify.com/documentation/web-api/reference/#/operations/upload-custom-playlist-cover"},"Add Custom Playlist Cover Image"),". The docs are not clear about this endpoint's usage."),(0,a.kt)("li",{parentName:"ul"},"Playlists, missing: ",(0,a.kt)("a",{parentName:"li",href:"https://developer.spotify.com/documentation/web-api/reference/#/operations/reorder-or-replace-playlists-tracks"},"Replace Playlist Items"),'. I don\'t understand how this endpoint needs to be called in order to "replace" playlist items. Reordering items, however, is supported.')),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Detailed Support Table"),(0,a.kt)("ul",null,(0,a.kt)("li",null,(0,a.kt)("b",null,"Albums"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Albums.checkAllUsersSavedAlbums"),(0,a.kt)("li",null,"Albums.checkUsersSavedAlbums"),(0,a.kt)("li",null,"Albums.getAlbum"),(0,a.kt)("li",null,"Albums.getAlbumTracks"),(0,a.kt)("li",null,"Albums.getAllAlbumTracks"),(0,a.kt)("li",null,"Albums.getAllAlbums"),(0,a.kt)("li",null,"Albums.getAllUsersSavedAlbums"),(0,a.kt)("li",null,"Albums.getNewAlbumReleases"),(0,a.kt)("li",null,"Albums.getSeveralAlbums"),(0,a.kt)("li",null,"Albums.getUsersSavedAlbums"),(0,a.kt)("li",null,"Albums.removeAllUsersSavedAlbums"),(0,a.kt)("li",null,"Albums.removeUsersSavedAlbums"),(0,a.kt)("li",null,"Albums.saveAlbumsForUser"),(0,a.kt)("li",null,"Albums.saveAllAlbumsForUser"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Artists"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Artists.getAllArtists"),(0,a.kt)("li",null,"Artists.getAllArtistsAlbums"),(0,a.kt)("li",null,"Artists.getArtist"),(0,a.kt)("li",null,"Artists.getArtistsAlbums"),(0,a.kt)("li",null,"Artists.getArtistsRelatedArtists"),(0,a.kt)("li",null,"Artists.getArtistsTopTracks"),(0,a.kt)("li",null,"Artists.getSeveralArtists"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Categories"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Categories.getCategory"),(0,a.kt)("li",null,"Categories.getSeveralCategories"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Episodes"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Episodes.beta.checkAllUsersSavedEpisodes"),(0,a.kt)("li",null,"Episodes.beta.checkUsersSavedEpisodes"),(0,a.kt)("li",null,"Episodes.beta.getAllUsersSavedEpisodes"),(0,a.kt)("li",null,"Episodes.beta.getUsersSavedEpisodes"),(0,a.kt)("li",null,"Episodes.beta.removeAllUsersSavedEpisodes"),(0,a.kt)("li",null,"Episodes.beta.removeUsersSavedEpisodes"),(0,a.kt)("li",null,"Episodes.beta.saveAllEpisodesForUser"),(0,a.kt)("li",null,"Episodes.beta.saveEpisodesForUser"),(0,a.kt)("li",null,"Episodes.getAllEpisodes"),(0,a.kt)("li",null,"Episodes.getEpisode"),(0,a.kt)("li",null,"Episodes.getSeveralEpisodes"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Genres"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Genres.getAvailableGenreSeeds"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Markets"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Markets.getAvailableMarkets"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Player"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Player.addToQueue"),(0,a.kt)("li",null,"Player.getAvailableDevices"),(0,a.kt)("li",null,"Player.getCurrentlyPlayingTrack"),(0,a.kt)("li",null,"Player.getPlaybackState"),(0,a.kt)("li",null,"Player.getRecentlyPlayedTracks"),(0,a.kt)("li",null,"Player.getUsersQueue"),(0,a.kt)("li",null,"Player.pausePlayback"),(0,a.kt)("li",null,"Player.seekToPosition"),(0,a.kt)("li",null,"Player.setPlaybackVolume"),(0,a.kt)("li",null,"Player.setRepeatMode"),(0,a.kt)("li",null,"Player.skipToNext"),(0,a.kt)("li",null,"Player.skipToPrevious"),(0,a.kt)("li",null,"Player.startOrResumePlayback"),(0,a.kt)("li",null,"Player.togglePlaybackShuffle"),(0,a.kt)("li",null,"Player.transferPlayback"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Playlists"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Playlists.addPlaylistItems"),(0,a.kt)("li",null,"Playlists.changePlaylist"),(0,a.kt)("li",null,"Playlists.createPlaylist"),(0,a.kt)("li",null,"Playlists.getAllCurrentUsersPlaylists"),(0,a.kt)("li",null,"Playlists.getAllPlaylistItems"),(0,a.kt)("li",null,"Playlists.getAllUsersPlaylists"),(0,a.kt)("li",null,"Playlists.getCategoryPlaylists"),(0,a.kt)("li",null,"Playlists.getCurrentUsersPlaylists"),(0,a.kt)("li",null,"Playlists.getFeaturedPlaylists"),(0,a.kt)("li",null,"Playlists.getPlaylist"),(0,a.kt)("li",null,"Playlists.getPlaylistCoverImage"),(0,a.kt)("li",null,"Playlists.getPlaylistItems"),(0,a.kt)("li",null,"Playlists.getUsersPlaylists"),(0,a.kt)("li",null,"Playlists.removePlaylistItems"),(0,a.kt)("li",null,"Playlists.reorderPlaylistItems"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Search"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Search.search"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Shows"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Shows.checkAllUsersSavedShows"),(0,a.kt)("li",null,"Shows.checkUsersSavedShows"),(0,a.kt)("li",null,"Shows.getAllShowEpisodes"),(0,a.kt)("li",null,"Shows.getAllShows"),(0,a.kt)("li",null,"Shows.getAllUsersSavedShows"),(0,a.kt)("li",null,"Shows.getSeveralShows"),(0,a.kt)("li",null,"Shows.getShow"),(0,a.kt)("li",null,"Shows.getShowEpisodes"),(0,a.kt)("li",null,"Shows.getUsersSavedShows"),(0,a.kt)("li",null,"Shows.removeAllUsersSavedShows"),(0,a.kt)("li",null,"Shows.removeUsersSavedShows"),(0,a.kt)("li",null,"Shows.saveAllShowsForUser"),(0,a.kt)("li",null,"Shows.saveShowsForUser"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Tracks"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Tracks.checkAllUsersSavedTracks"),(0,a.kt)("li",null,"Tracks.checkUsersSavedTracks"),(0,a.kt)("li",null,"Tracks.getAllAudioFeatures"),(0,a.kt)("li",null,"Tracks.getAllTracks"),(0,a.kt)("li",null,"Tracks.getAllUsersSavedTracks"),(0,a.kt)("li",null,"Tracks.getAudioAnalysis"),(0,a.kt)("li",null,"Tracks.getAudioFeatures"),(0,a.kt)("li",null,"Tracks.getRecommendations"),(0,a.kt)("li",null,"Tracks.getSeveralAudioFeatures"),(0,a.kt)("li",null,"Tracks.getSeveralTracks"),(0,a.kt)("li",null,"Tracks.getTrack"),(0,a.kt)("li",null,"Tracks.getUsersSavedTracks"),(0,a.kt)("li",null,"Tracks.removeAllUsersTracksForUser"),(0,a.kt)("li",null,"Tracks.removeUsersSavedTracks"),(0,a.kt)("li",null,"Tracks.saveAllTracksForUser"),(0,a.kt)("li",null,"Tracks.saveTracksForUser"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"Users"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"Users.checkFollowsAllArtists"),(0,a.kt)("li",null,"Users.checkFollowsAllUsers"),(0,a.kt)("li",null,"Users.checkFollowsArtists"),(0,a.kt)("li",null,"Users.checkFollowsUsers"),(0,a.kt)("li",null,"Users.checkUsersFollowPlaylist"),(0,a.kt)("li",null,"Users.followAllArtists"),(0,a.kt)("li",null,"Users.followAllUsers"),(0,a.kt)("li",null,"Users.followArtists"),(0,a.kt)("li",null,"Users.followPlaylist"),(0,a.kt)("li",null,"Users.followUsers"),(0,a.kt)("li",null,"Users.getAllUsersTopArtists"),(0,a.kt)("li",null,"Users.getAllUsersTopTracks"),(0,a.kt)("li",null,"Users.getCurrentUsersProfile"),(0,a.kt)("li",null,"Users.getUsersFollowedArtists"),(0,a.kt)("li",null,"Users.getUsersProfile"),(0,a.kt)("li",null,"Users.getUsersTopArtists"),(0,a.kt)("li",null,"Users.getUsersTopTracks"),(0,a.kt)("li",null,"Users.unfollowAllArtists"),(0,a.kt)("li",null,"Users.unfollowAllUsers"),(0,a.kt)("li",null,"Users.unfollowArtists"),(0,a.kt)("li",null,"Users.unfollowPlaylist"),(0,a.kt)("li",null,"Users.unfollowUsers"))),(0,a.kt)("li",null,(0,a.kt)("b",null,"future"),(0,a.kt)("ul",null,(0,a.kt)("li",null,"future.request"))))),(0,a.kt)("h3",{id:"response-schema"},"Response Schema"),(0,a.kt)("p",null,"The core library uses ",(0,a.kt)("a",{parentName:"p",href:"https://axios-http.com/"},(0,a.kt)("inlineCode",{parentName:"a"},"axios"))," for all HTTP requests to Spotify. Each method call returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"DataResponse")," object with request metadata. Convenience methods will return a ",(0,a.kt)("inlineCode",{parentName:"p"},"DataResponse")," array. ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," will hold the return value of interest."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type DataResponse<T = unknown> = {\n  data: T;\n  headers: Record<string, string>;\n  statusCode: number;\n};\n")),(0,a.kt)("p",null,"Both ",(0,a.kt)("inlineCode",{parentName:"p"},"DataResponse")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"DataPromise")," are exported so you don't have to infer them. The latter simply wraps the former in a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import type { DataResponse, DataPromise } from '@spotifly/core';\n")),(0,a.kt)("h3",{id:"future"},"Future"),(0,a.kt)("p",null,"Today's client supports the Spotify endpoints of tomorrow. The API features a ",(0,a.kt)("inlineCode",{parentName:"p"},"future.request")," function that acts as an escape hatch for everything that is not yet or incorretly supported by this library. Requests made through ",(0,a.kt)("inlineCode",{parentName:"p"},"future.request")," are always authenticated."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"await spotifyClient.future\n  .request<MyResponseType>({ url: 'me/new-releases' })\n  .then(console.log); // typeof MyResponseType\n")),(0,a.kt)("h2",{id:"convenience-methods"},"Convenience Methods"),(0,a.kt)("p",null,"Methods that contain ",(0,a.kt)("inlineCode",{parentName:"p"},"all")," in their name are convenience methods for (offset-based) paginated and limited endpoints. Limited endpoints expect a maximum amount of items when queried."),(0,a.kt)("p",null,"Examples are ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracks.getUsersSavedTracks")," (paginated) and ",(0,a.kt)("inlineCode",{parentName:"p"},"Tracks.getSeveralTracks")," (limited). The Spotify Web API returns at most 50 items when asked for a user's saved tracks and allows no more than 50 track ids when querying for track catalog information."),(0,a.kt)("h3",{id:"usage-1"},"Usage"),(0,a.kt)("p",null,"All convenience methods are aware of their specific limitations. They know how many items they can request from Spotify at once and will max out each request, taking care of chunking item ids and handling paginated endpoints."),(0,a.kt)("p",null,"Non-convenience/ordinary methods do not have such logic. They do not check or chunk requests and it's up to you to make sure you're calling the endpoint according to its usage."),(0,a.kt)("h3",{id:"callbacks"},"Callbacks"),(0,a.kt)("p",null,"The following example returns all of a user's saved tracks in a flat array. Convenience methods have a different signature: ",(0,a.kt)("strong",{parentName:"p"},"They are curried and return a function which optionally accepts a callback"),". Each time a new chunk of items is fetched, the response wrapped in a ",(0,a.kt)("inlineCode",{parentName:"p"},"DataResponse<T>")," is passed to the callback as the only argument."),(0,a.kt)("p",null,"Asynchronous callbacks are allowed. Their return values are ignored."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const allTracks = await spotifyClient.Tracks.getAllUsersSavedTracks()(\n  async response => {\n    // DataResponse<SpotifyApi.UsersSavedTracksResponse>\n    console.log(`fetched ${response.data.items.length} items!`);\n  }\n).then(allResponses => {\n  return allResponses.map(({ data }) => data.items).flat();\n});\n")),(0,a.kt)("p",null,"You can do pretty much anything with the chunk - e.g., log something to the console or send the items somewhere else."),(0,a.kt)("p",null,"Convenience methods simply wrap their ordinary counterpart and resolve all responses in a single array. This is reflected in their return types: If the ordinary methods returns ",(0,a.kt)("inlineCode",{parentName:"p"},"DataResponse<T>"),", the convenience method returns ",(0,a.kt)("inlineCode",{parentName:"p"},"Array<DataResponse<T>>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const allTracks: DataResponse<SpotifyApi.UsersSavedTracksResponse>[] =\n  await spotifyClient.Tracks.getAllUsersSavedTracks()();\n\nconst someTracks: DataResponse<SpotifyApi.UsersSavedTracksResponse> =\n  await spotifyClient.Tracks.getUsersSavedTracks();\n")),(0,a.kt)("h2",{id:"testing-recipes"},"Testing Recipes"),(0,a.kt)("p",null,"The core library can be mocked nicely with ",(0,a.kt)("a",{parentName:"p",href:"https://jestjs.io/"},(0,a.kt)("inlineCode",{parentName:"a"},"Jest"))," and the TypeScript-friendly ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/jest-mock-extended"},(0,a.kt)("inlineCode",{parentName:"a"},"jest-mock-extended"))," extension. The following examples assume you have already setup ",(0,a.kt)("inlineCode",{parentName:"p"},"Jest")," accordingly for your project."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Install ",(0,a.kt)("inlineCode",{parentName:"li"},"jest-mock-extended"),".")),(0,a.kt)(s.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(r.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -D jest-mock-extended\n"))),(0,a.kt)(r.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -D jest-mock-extended\n")))),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Mock whatever methods you are using using the ",(0,a.kt)("inlineCode",{parentName:"li"},"mockDeep")," helper and inject this object whenever ",(0,a.kt)("inlineCode",{parentName:"li"},"initialize")," is called in the implementation. Using the types from ",(0,a.kt)("inlineCode",{parentName:"li"},"@types/spotify-api"),", it's very easy to create solid mock responses.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as Spotifly from '@spotifly/core';\nimport { mockDeep } from 'jest-mock-extended';\n\nconst audioFeatures: SpotifyApi.AudioFeaturesObject = {\n  acousticness: 0.00242,\n  analysis_url: 'https://api.spotify.com/v1/audio-analysis/2takc7B',\n  danceability: 0.585,\n  duration_ms: 237040,\n  energy: 0.842,\n  id: '2takc7B',\n  instrumentalness: 0.00686,\n  key: 9,\n  liveness: 0.0866,\n  loudness: -5.883,\n  mode: 0,\n  speechiness: 0.0556,\n  tempo: 118.211,\n  time_signature: 4,\n  track_href: 'https://api.spotify.com/v1/tracks/2takc7B',\n  type: 'audio_features',\n  uri: 'spotify:track:2takc7B',\n  valence: 0.428,\n};\n\ntype MockResponse =\n  Spotifly.DataResponse<SpotifyApi.MultipleAudioFeaturesResponse>;\n\nconst mockResponse = (length: number): MockResponse => {\n  return {\n    data: {\n      audio_features: Array.from({ length }, () => audioFeatures),\n    },\n    statusCode: 200,\n    headers: {},\n  };\n};\n\nconst mockSpotify = mockDeep<Spotifly.SpotifyClient>();\n\n// Return a mocked client whenever the client is initialized\njest.spyOn(Spotifly, 'initialize').mockReturnValue(mockSpotify);\n\n// Mocking an ordinary method\nmockSpotify.Tracks.getSeveralAudioFeatures.mockImplementation(ids => {\n  return Promise.resolve(mockResponse(ids.length));\n});\n\n// Mocking a convenience method\nmockSpotify.Tracks.getAllAudioFeatures.mockImplementation(ids => {\n  return cb => {\n    if (cb) cb(mockResponse(ids.length));\n    return Promise.resolve([mockResponse(ids.length)]);\n  };\n});\n\ntest('my function', async () => {\n  // Your code\n  function getData() {\n    const client = Spotifly.initialize({ accessToken: 'abc123' });\n    return client.Tracks.getSeveralAudioFeatures(['2takc7B', '6hsak']);\n  }\n  // Assert anything!\n  const res = await getData();\n  expect(res.data.audio_features).toHaveLength(2);\n});\n")))}d.isMDXComponent=!0},5318:(e,t,l)=>{l.d(t,{Zo:()=>p,kt:()=>d});var n=l(7378);function a(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function s(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function r(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?s(Object(l),!0).forEach((function(t){a(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):s(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function i(e,t){if(null==e)return{};var l,n,a=function(e,t){if(null==e)return{};var l,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)l=s[n],t.indexOf(l)>=0||(a[l]=e[l]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)l=s[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(a[l]=e[l])}return a}var o=n.createContext({}),u=function(e){var t=n.useContext(o),l=t;return e&&(l="function"==typeof e?e(t):r(r({},t),e)),l},p=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var l=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),k=u(l),d=a,m=k["".concat(o,".").concat(d)]||k[d]||c[d]||s;return l?n.createElement(m,r(r({ref:t},p),{},{components:l})):n.createElement(m,r({ref:t},p))}));function d(e,t){var l=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=l.length,r=new Array(s);r[0]=k;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var u=2;u<s;u++)r[u]=l[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,l)}k.displayName="MDXCreateElement"}}]);