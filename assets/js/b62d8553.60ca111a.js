"use strict";(self.webpackChunk_spotifly_website=self.webpackChunk_spotifly_website||[]).push([[889],{2599:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7378),r=n(8944);const l="tabItem_wHwb";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},7698:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(2685),r=n(7378),l=n(8944),i=n(362),o=n(56),s=n(5720),p=n(9169);const c="tabList_J5MA",u="tabItem_l0OV";function m(e){var t,n;const{lazy:i,block:m,defaultValue:d,values:k,groupId:h,className:g}=e,y=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=k?k:y.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,o.l)(f,((e,t)=>e.value===t.value));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const b=null===d?d:null!=(t=null!=d?d:null==(n=y.find((e=>e.props.default)))?void 0:n.props.value)?t:y[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:T}=(0,s.U)(),[S,w]=(0,r.useState)(b),A=[],{blockElementScrollPositionUntilNextRender:C}=(0,p.o5)();if(null!=h){const e=N[h];null!=e&&e!==S&&f.some((t=>t.value===e))&&w(e)}const x=e=>{const t=e.currentTarget,n=A.indexOf(t),a=f[n].value;a!==S&&(C(t),w(a),null!=h&&T(h,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=A.indexOf(e.currentTarget)+1;n=null!=(a=A[t])?a:A[0];break}case"ArrowLeft":{var r;const t=A.indexOf(e.currentTarget)-1;n=null!=(r=A[t])?r:A[A.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},g)},f.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:S===t?0:-1,"aria-selected":S===t,key:t,ref:e=>A.push(e),onKeyDown:E,onFocus:x,onClick:x},i,{className:(0,l.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":S===t})}),null!=n?n:t)}))),i?(0,r.cloneElement)(y.filter((e=>e.props.value===S))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},y.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==S})))))}function d(e){const t=(0,i.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},4119:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var a=n(2685),r=(n(7378),n(5318)),l=n(7698),i=n(2599);const o={title:"Core"},s=void 0,p={unversionedId:"packages/core",id:"packages/core",title:"Core",description:"npm (scoped) Codecov",source:"@site/docs/packages/core.mdx",sourceDirName:"packages",slug:"/packages/core",permalink:"/docs/packages/core",draft:!1,editUrl:"https://github.com/eegli/spotifly/tree/main/docs/docs/packages/core.mdx",tags:[],version:"current",frontMatter:{title:"Core"},sidebar:"tutorialSidebar",previous:{title:"Auth Token",permalink:"/docs/packages/auth-token"},next:{title:"Library",permalink:"/docs/packages/library/"}},c={},u=[{value:"Motivation",id:"motivation",level:2},{value:"Usage",id:"usage",level:2},{value:"Installation",id:"installation",level:3},{value:"Example",id:"example",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Supported Endpoints and Methods",id:"supported-endpoints-and-methods",level:3},{value:"Response Schema",id:"response-schema",level:3},{value:"Convenience Methods",id:"convenience-methods",level:3},{value:"Testing Recipes",id:"testing-recipes",level:2}],m={toc:u};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://img.shields.io/npm/v/@spotifly/core",alt:"npm (scoped)"})," ",(0,r.kt)("img",{parentName:"p",src:"https://codecov.io/gh/eegli/spotifly/branch/main/graph/badge.svg?flag=core",alt:"Codecov"})),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"The Spotifly core library is a lightweight wrapper for the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.spotify.com/documentation/web-api/"},"Spotify Web API"),". Out of the box, it features:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Strong TypeScript and IntelliSense support"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"All function parameters and return values are strongly typed"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"A neatly organized, intuitive API"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Sticks closely to the semantics of the Web API"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Convenience methods for limited and paginated endpoints"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Automatically retreive all items from paginated and limited endpoints"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Automatic authentication"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Provide your credentials once and have every request authenticate automatically with Spotify"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Testing with confidence"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Creating stubs for the core lib is a piece of cake. Read along for testing recipes!")))),(0,r.kt)("p",null,"Although the core library is very lightweight, it may be overkill if you're only interested in one or two Web API endpoints. However, for many other use cases, including long-running apps, it's a great fit."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)(l.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @spotifly/core\n"))),(0,r.kt)(i.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @spotifly/core\n")))),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import * as Spotifly from '@spotifly/core';\n\nconst spotifyClient = Spotifly.initialize({\n  accessToken: 'abc123',\n});\n\n// Deriving the genres of a track via its artists\nawait spotifyClient.Tracks.Track.get('5nHc8CmiPllMzHbJhhx3KS')\n  .then(res => {\n    return res.data.artists.map(artist => artist.id);\n  })\n  .then(artistIds => {\n    return spotifyClient.Artists.Artist.getSeveral(artistIds);\n  })\n  .then(res => {\n    const genres = res.data.artists.map(artist => artist.genres).flat();\n    console.log(genres); // [ 'livetronica', 'munich electronic' ]\n  });\n\n// Getting all of a user's saved tracks\nawait spotifyClient.Tracks.UsersSaved.getAll()()\n  .then(res => {\n    return res.map(res => res.data.items).flat();\n  })\n  .then(library => {\n    console.log(library.length); // 70\n  });\n\n// Searching for an item\nawait spotifyClient.Search.forItem({ query: 'eminem', type: 'album' }).then(\n  res => {\n    console.log(res.data.albums?.items[0]?.name); // 'The Eminem Show'\n  }\n);\n")),(0,r.kt)("h3",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Every Spotify client is created through a call to ",(0,r.kt)("inlineCode",{parentName:"p"},"initialize"),". A client is bound to the ",(0,r.kt)("strong",{parentName:"p"},"authentication method it was instantiated with"),". There are multiple ways to instantiate a client:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"With a Spotify client id, client secret and refresh token")," - This method will automatically generate an initial access token and refresh it when it's about to expire after 1 hour. This is great for apps that need to run independently.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { initialize } from '@spotifly/core';\n\nconst spotifyClient = initialize({\n  clientId: process.env.SPOTIFY_CLIENT_ID || '',\n  clientSecret: process.env.SPOTIFY_CLIENT_SECRET || '',\n  refreshToken: process.env.SPOTIFY_REFRESH_TOKEN || '',\n});\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"With a Spotify access token")," - This method will simply attach the provided access token to requests to Spotify. No secrets are involved but requests may fail once the token has expired.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { initialize } from '@spotifly/core';\n\nconst spotifyClient = Spotify.initialize({\n  accessToken: 'abc123',\n});\n")),(0,r.kt)("p",null,"Both methods return a Spotify client with the same methods."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Usually, a refresh token only needs to be generated once. You can ",(0,r.kt)("a",{parentName:"p",href:"/docs/authorization"},"generate one here")," using the Authorization Code Flow.")),(0,r.kt)("h3",{id:"supported-endpoints-and-methods"},"Supported Endpoints and Methods"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://developer.spotify.com/documentation/web-api/reference/#/"},"Web API Reference"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u2705 - Fully supported"),(0,r.kt)("li",{parentName:"ul"},"\u303d\ufe0f - Partial support - work in progress"),(0,r.kt)("li",{parentName:"ul"},"\u274c - Not yet suppoted - contributions are welcome!")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Endpoint"),(0,r.kt)("th",{parentName:"tr",align:null},"Support"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Albums"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Artists"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Shows"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Episodes"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tracks"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Search"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Users"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Playlists"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Categories"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Genres"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Player"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Markets"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Detailed Support Table"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("b",null,"Artists"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"Artists.Albums.get"),(0,r.kt)("li",null,"Artists.Albums.getAll"),(0,r.kt)("li",null,"Artists.Artist.get"),(0,r.kt)("li",null,"Artists.Artist.getAll"),(0,r.kt)("li",null,"Artists.Artist.getSeveral"),(0,r.kt)("li",null,"Artists.RelatedArtists.get"),(0,r.kt)("li",null,"Artists.TopTracks.get"))),(0,r.kt)("li",null,(0,r.kt)("b",null,"Tracks"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"Tracks.AudioAnalysis.get"),(0,r.kt)("li",null,"Tracks.AudioFeatures.get"),(0,r.kt)("li",null,"Tracks.AudioFeatures.getAll"),(0,r.kt)("li",null,"Tracks.AudioFeatures.getSeveral"),(0,r.kt)("li",null,"Tracks.Recommendations.get"),(0,r.kt)("li",null,"Tracks.Track.get"),(0,r.kt)("li",null,"Tracks.Track.getAll"),(0,r.kt)("li",null,"Tracks.Track.getSeveral"),(0,r.kt)("li",null,"Tracks.UsersSaved.check"),(0,r.kt)("li",null,"Tracks.UsersSaved.checkAll"),(0,r.kt)("li",null,"Tracks.UsersSaved.get"),(0,r.kt)("li",null,"Tracks.UsersSaved.getAll"),(0,r.kt)("li",null,"Tracks.UsersSaved.remove"),(0,r.kt)("li",null,"Tracks.UsersSaved.removeAll"),(0,r.kt)("li",null,"Tracks.UsersSaved.save"),(0,r.kt)("li",null,"Tracks.UsersSaved.saveAll"))))),(0,r.kt)("h3",{id:"response-schema"},"Response Schema"),(0,r.kt)("p",null,"The core library uses ",(0,r.kt)("a",{parentName:"p",href:"https://axios-http.com/"},(0,r.kt)("inlineCode",{parentName:"a"},"axios"))," for all HTTP requests to Spotify. Each method call returns a ",(0,r.kt)("inlineCode",{parentName:"p"},"DataResponse")," object with request metadata. Convenience methods will return a ",(0,r.kt)("inlineCode",{parentName:"p"},"DataResponse")," array. ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," will hold the return value of interest."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type DataResponse<T = unknown> = {\n  data: T;\n  headers: Record<string, string>;\n  statusCode: number;\n};\n")),(0,r.kt)("p",null,"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"DataResponse")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DataPromise")," are exported so you don't have to infer them. The latter simply wraps the former in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import type { DataResponse, DataPromise } from '@spotifly/core';\n")),(0,r.kt)("h3",{id:"convenience-methods"},"Convenience Methods"),(0,r.kt)("p",null,"TODO"),(0,r.kt)("h2",{id:"testing-recipes"},"Testing Recipes"),(0,r.kt)("p",null,"The core library can be mocked nicely with ",(0,r.kt)("a",{parentName:"p",href:"https://jestjs.io/"},(0,r.kt)("inlineCode",{parentName:"a"},"Jest"))," and the TypeScript-friendly ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/jest-mock-extended"},(0,r.kt)("inlineCode",{parentName:"a"},"jest-mock-extended"))," extension. The following examples assume you have already setup ",(0,r.kt)("inlineCode",{parentName:"p"},"Jest")," accordingly for your project."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Install ",(0,r.kt)("inlineCode",{parentName:"li"},"jest-mock-extended"),".")),(0,r.kt)(l.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -D jest-mock-extended\n"))),(0,r.kt)(i.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -D jest-mock-extended\n")))),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Mock whatever methods you are using using the ",(0,r.kt)("inlineCode",{parentName:"li"},"mockDeep")," helper and inject this object whenever ",(0,r.kt)("inlineCode",{parentName:"li"},"initialize")," is called in the implementation. Using the types from ",(0,r.kt)("inlineCode",{parentName:"li"},"@types/spotify-api"),", it's very easy to create solid mock responses.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import * as Spotifly from '@spotifly/core';\nimport { mockDeep } from 'jest-mock-extended';\n\nconst mockSpotify = mockDeep<Spotifly.SpotifyClient>();\n\ntype MockResponse =\n  Spotifly.DataResponse<SpotifyApi.MultipleAudioFeaturesResponse>;\n\nconst mockResponse = (length: number): MockResponse => {\n  return {\n    data: {\n      audio_features: Array.from({ length }, () => ({\n        acousticness: 0.00242,\n        analysis_url: 'https://api.spotify.com/v1/audio-analysis/2takc7B',\n        danceability: 0.585,\n        duration_ms: 237040,\n        energy: 0.842,\n        id: '2takc7B',\n        instrumentalness: 0.00686,\n        key: 9,\n        liveness: 0.0866,\n        loudness: -5.883,\n        mode: 0,\n        speechiness: 0.0556,\n        tempo: 118.211,\n        time_signature: 4,\n        track_href: 'https://api.spotify.com/v1/tracks/2takc7B',\n        type: 'audio_features',\n        uri: 'spotify:track:2takc7B',\n        valence: 0.428,\n      })),\n    },\n    statusCode: 200,\n    headers: {},\n  };\n};\n\n// Return a mocked client whenever the client is initialized\njest.spyOn(Spotifly, 'initialize').mockReturnValue(mockSpotify);\n\n// Mocking an ordinary method\nmockSpotify.Tracks.AudioFeatures.getSeveral.mockImplementation(ids => {\n  return Promise.resolve(mockResponse(ids.length));\n});\n\n// Mocking a convenience method\nmockSpotify.Tracks.AudioFeatures.getAll.mockImplementation(ids => {\n  return cb => {\n    if (cb) cb(mockResponse(ids.length));\n    return Promise.resolve([mockResponse(ids.length)]);\n  };\n});\n\ntest('my function', async () => {\n  // Your code\n  function getData() {\n    const client = Spotifly.initialize({ accessToken: 'abc123' });\n    return client.Tracks.AudioFeatures.getSeveral(['2takc7B', '6hsak']);\n  }\n  // Assert anything!\n  const res = await getData();\n  expect(res.data.audio_features).toHaveLength(2);\n});\n")))}d.isMDXComponent=!0},5318:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||l;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);